// ===== –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ö–õ–ê–î–Ü–í =====
async function loadTranslations(lang = 'ua') {
  try {
    const res = await fetch(`translations/${lang}.json`);
    if (!res.ok) throw new Error(`Failed to load translations: ${res.status}`);
    return await res.json();
  } catch (e) {
    console.error('Error loading translations:', e);
    return {};
  }
}

// ===== –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ú–û–í–ò –ö–û–†–ò–°–¢–£–í–ê–ß–ê =====
function getCurrentLang() {
  return localStorage.getItem('selectedLang') || (navigator.language.startsWith('en') ? 'en' : 'ua');
}

// ===== –û–ë–†–û–ë–ù–ò–ö –ü–ï–†–ï–ú–ò–ö–ê–ù–ù–Ø –ú–û–í–ò =====
document.addEventListener('DOMContentLoaded', () => {
  const selector = document.getElementById("languageSelector");
  if (selector) {
    selector.value = getCurrentLang();
    selector.addEventListener("change", (e) => {
      localStorage.setItem("selectedLang", e.target.value);
      location.reload(); // –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—É
    });
  }
});

// ===== –ì–û–õ–û–í–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö PAGELOAD =====
ZOHO.embeddedApp.on("PageLoad", async function (data) {
  console.log("üöÄ PageLoad –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ", data);
  
  const lang = getCurrentLang();
  const t = await loadTranslations(lang);
  
  try {
    const dealId = data.EntityId;
    if (!dealId) {
      console.warn(t.dealIdNotFound || "‚ö†Ô∏è Deal ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return;
    }
    console.log("üîç Deal ID:", dealId);

    // –°–ø–µ—Ä—à—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∫—É—Ä—Å—É (—â–æ–± —Ç–∞–±–ª–∏—Ü—è –±—É–ª–∞ –≤—ñ–¥—Ä–∞–∑—É)
    await loadExchangeRateHistory(dealId);

    // –¢–µ–∫—Å—Ç–∏ UI
    document.getElementById('widgetTitle').textContent = t.widgetTitle || 'üí± –í–∞–ª—é—Ç–Ω–∏–π –∫—É—Ä—Å';
    document.getElementById('nbuRateLabel').textContent = t.nbuRate || '–ö—É—Ä—Å –ù–ë–£';
    document.getElementById('dealRateLabel').textContent = t.dealRate || '–ö—É—Ä—Å –≤ –£–≥–æ–¥—ñ';
    document.getElementById('differenceLabel').textContent = t.difference || '–†—ñ–∑–Ω–∏—Ü—è (%)';
    document.getElementById('dealRate').textContent = t.loading || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    document.getElementById('nbuRate').textContent = t.loading || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    document.getElementById('difference').textContent = t.loading || '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤
    const nbuRate = await fetchNbuRate();
    console.log("–ö—É—Ä—Å –ù–ë–£ –æ—Ç—Ä–∏–º–∞–Ω–æ:", nbuRate);
    document.getElementById('nbuRate').textContent = `${nbuRate.toFixed(2)} ‚Ç¥`;

    const dealRate = await fetchDealRate(dealId);
    console.log("–ö—É—Ä—Å –≤ —É–≥–æ–¥—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ:", dealRate);
    document.getElementById('dealRate').textContent = `${dealRate.toFixed(2)} ‚Ç¥`;

const lastFieldRateRaw = localStorage.getItem(`lastFieldRate_${dealId}`);
const lastFieldRate = lastFieldRateRaw ? parseFloat(lastFieldRateRaw) : null;

if (!isNaN(dealRate) && dealRate > 0 && dealRate !== lastFieldRate) {
  let manualDiffPercent = 0;
  if (!isNaN(lastFieldRate) && lastFieldRate > 0) {
    manualDiffPercent = ((dealRate / lastFieldRate - 1) * 100);
  }

 const success = await createAndStoreHistory(dealId, dealRate, manualDiffPercent);
if (success) {
  localStorage.setItem(`lastFieldRate_${dealId}`, dealRate.toString());
  console.log("üü† –ù–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è field –≤–∏—è–≤–ª–µ–Ω–æ ‚Äî –∑–∞–ø–∏—Å—É—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é");
  await loadExchangeRateHistory(dealId);
}
}

    const diff = ((dealRate / nbuRate) - 1) * 100;
    const roundedDiff = Math.round(diff * 10) / 10;
    document.getElementById('difference').textContent = `${roundedDiff.toFixed(1)} %`;

    const btn = document.getElementById('btnUpdate');
    document.getElementById('btnText').textContent = t.updateRate || '–ó–∞–ø–∏—Å–∞—Ç–∏ –∫—É—Ä—Å –≤ –£–≥–æ–¥—É';

    if (Math.abs(roundedDiff) >= 5) {
      btn.style.display = 'inline-block';
      btn.classList.remove('d-none');

      btn.onclick = async () => {
        btn.disabled = true;
        btn.classList.add('btn-loading');

        try {
          const recordRes = await ZOHO.CRM.API.getRecord({ Entity: "Deals", RecordID: dealId });
          const deal = recordRes.data[0];
        const oldRate = parseFloat(deal.Exchange_Rate);
        console.log("–°—Ç–∞—Ä–∏–π –∫—É—Ä—Å –∑ —É–≥–æ–¥–∏:", oldRate);
let diffPercent = null;

if (!isNaN(oldRate) && oldRate !== 0) {
  diffPercent = ((nbuRate / oldRate - 1) * 100);
} else {
  diffPercent = 0; 
}


          const updateRes = await ZOHO.CRM.API.updateRecord({
      Entity: "Deals",
            RecordID: dealId,
            APIData: [{ id: dealId, field: nbuRate }]
          });

          console.log("updateRes", updateRes);

          if (updateRes.data && updateRes.data[0].code === "SUCCESS") {
            console.log("üü¢ –ö—É—Ä—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ CRM");

            // üß© –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
            await createExchangeRateHistory(dealId, nbuRate, diffPercent);
            localStorage.setItem(`lastFieldRate_${dealId}`, dealRate.toString());
            // –ü–ï–†–ï–ù–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –Ü–°–¢–û–†–Ü–á –¢–ê UI –±–µ–∑ reload
            await loadExchangeRateHistory(dealId);
            document.getElementById('dealRate').textContent = `${nbuRate.toFixed(2)} ‚Ç¥`;
            document.getElementById('difference').textContent = '0.0 %';

            alert(t.rateUpdated || "‚úÖ –ö—É—Ä—Å –æ–Ω–æ–≤–ª–µ–Ω–æ");
            
          } else {
            console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏:", updateRes);
            alert(t.updateError || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫—É—Ä—Å—É");
          }
        } catch (e) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", e);
          alert(t.updateError || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ");
        } finally {
          btn.disabled = false;
          btn.classList.remove('btn-loading');
        }
      };

    } else {
      btn.style.display = 'none';
    }
  } catch (e) {
    console.error("üî• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", e);
    alert((t.fatalError || "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ") + e.message);
  }
});

// ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø SDK =====
ZOHO.embeddedApp.init().then(() => {
  console.log("‚úÖ SDK —ñ–Ω–∏—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
});

// ===== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –ù–ë–£ =====
async function fetchNbuRate() {
  const saved = localStorage.getItem('nbuRate');

  if (saved) {
    try {
      const { rate, date } = JSON.parse(saved);
      const today = new Date().toISOString().slice(0, 10);

      if (date === today) {
        console.log("‚úÖ –ö—É—Ä—Å –ù–ë–£ –∑ localStorage (–∞–∫—Ç—É–∞–ª—å–Ω–∏–π):", rate);
        return parseFloat(rate);
      } else {
        console.log("‚è≥ –ö—É—Ä—Å –≤ localStorage –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π. –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π.");
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫—É—Ä—Å. –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π.");
    }
  }

  // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î –∞–±–æ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ/–±–∏—Ç—ñ ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –∫—É—Ä—Å
  try {
    const res = await fetch('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?valcode=USD&json');
    const data = await res.json();
    const rate = data[0].rate;

    const today = new Date().toISOString().slice(0, 10);
    localStorage.setItem('nbuRate', JSON.stringify({ rate, date: today }));
    console.log("üåê –ö—É—Ä—Å –ù–ë–£ –∑ API –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", rate);

    return rate;
  } catch (e) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –ù–ë–£:", e);
    return 0;
  }
}

// ===== –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É –∑ —É–≥–æ–¥–∏ =====
async function fetchDealRate(id) {
  try {
    const res = await ZOHO.CRM.API.getRecord({ Entity: "Deals", RecordID: id });
    console.log("–û—Ç–≤–µ—Ç –æ—Ç getRecord:", res);
    return parseFloat(res.data?.[0]?.field) || 0;
  } catch (e) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–≥–æ–¥–∏:", e);
    return 0;
  }
}

async function createExchangeRateHistory(dealId, currentRate) {
  try {
    const now = new Date().toISOString().split('.')[0] + 'Z';

    const lastRateRaw = localStorage.getItem(`lastFieldRate_${dealId}`);
    const lastRate = lastRateRaw ? parseFloat(lastRateRaw) : null;

    const fields = await ZOHO.CRM.META.getFields({ Entity: "Exchange_Rate_History" });
console.log(fields.fields.map(f => ({ api_name: f.api_name, field_label: f.field_label })));

    console.log("üì¶ createExchangeRateHistory ‚Üí currentRate:", currentRate);
    console.log("üì¶ createExchangeRateHistory ‚Üí lastRateRaw:", lastRateRaw);
    console.log("üì¶ createExchangeRateHistory ‚Üí lastRate (parsed):", lastRate);

    let diffPercent = 0;

    if (lastRate !== null && !isNaN(lastRate) && lastRate > 0) {
      diffPercent = ((currentRate / lastRate - 1) * 100);
    } else {
      console.warn("‚ö†Ô∏è lastRate –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –°—Ç–∞–≤–∏–º–æ diffPercent = 0");
      diffPercent = 0;
    }

    console.log("üìä createExchangeRateHistory ‚Üí diffPercent:", diffPercent);

    const response = await ZOHO.CRM.API.insertRecord({
      Entity: "Exchange_Rate_History",
      APIData: {
        Name: `–ö—É—Ä—Å –Ω–∞ ${new Date().toLocaleDateString("uk-UA")}`,
        Deal: dealId,
        Rate: currentRate,
        Date: now,
        Rate_Source: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ",
        Difference: parseFloat(diffPercent.toFixed(1)) 
      }
    });

    console.log("üì• –Ü—Å—Ç–æ—Ä—ñ—é –∫—É—Ä—Å—É –∑–∞–ø–∏—Å–∞–Ω–æ:", response);

    if (response.data?.[0]?.details?.id) {
      const historyIds = JSON.parse(localStorage.getItem(`historyIds_${dealId}`)) || [];
      const newId = response.data[0].details.id;

      if (!historyIds.includes(newId)) {
        historyIds.push(newId);
        localStorage.setItem(`historyIds_${dealId}`, JSON.stringify(historyIds));
      }
    }

  } catch (error) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –≤ createExchangeRateHistory:", error);
  }
}

async function loadExchangeRateHistory(dealId) {
  try {
    const savedHistoryIds = JSON.parse(localStorage.getItem(`historyIds_${dealId}`)) || [];

    const records = [];
    for (const id of savedHistoryIds) {
  const res = await ZOHO.CRM.API.getRecord({ Entity: "Exchange_Rate_History", RecordID: id });
  if (res.data && res.data[0]) {
    records.push(res.data[0]);
   
  }
}
   
    const sorted = records.sort((a, b) => new Date(b.Date) - new Date(a.Date));
    const latest5 = sorted.slice(0, 5);

    renderHistoryTable(latest5);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:", error);
  }
}
console.log("searchRecords available?", typeof ZOHO.CRM.API.searchRecords);
function renderHistoryTable(data) {
  const container = document.getElementById("history-table");

  if (!container) return;

  if (data.length === 0) {
    container.innerHTML = "<p>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó.</p>";
    return;
  }

  const rows = data.map(record => {
    const date = new Date(record.Date);
    const formattedDate = date.toLocaleString("uk-UA", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });
console.log("üß™ record.Difference:", record.Difference);
    return `
      <tr>
        <td>${formattedDate}</td>
        <td>${record.Rate}</td>
        <td>${!isNaN(parseFloat(record.Difference)) ? parseFloat(record.Difference).toFixed(1) : "‚Äî"}%</td>
      </tr>
    `;
  }).join("");

  container.innerHTML = `
    <table class="table table-striped">
      <thead>
        <tr>
          <th>–î–∞—Ç–∞</th>
          <th>–ö—É—Ä—Å</th>
          <th>–†—ñ–∑–Ω–∏—Ü—è %</th>
        </tr>
      </thead>
      <tbody>
        ${rows}
      </tbody>
    </table>
  `;
}



async function createAndStoreHistory(dealId, rate) {
  try {
    const now = new Date().toISOString().split('.')[0] + 'Z';

    const lastRateRaw = localStorage.getItem(`lastFieldRate_${dealId}`);
    const lastRate = lastRateRaw ? parseFloat(lastRateRaw) : null;

    console.log("üßæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:");
    console.log("‚ñ∂Ô∏è –ù–æ–≤–∏–π –∫—É—Ä—Å (rate):", rate);
    console.log("üì¶ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –∫—É—Ä—Å (lastRate):", lastRate);

    let diffPercent = 0;
    if (!isNaN(lastRate) && lastRate > 0) {
      diffPercent = ((rate / lastRate - 1) * 100);
    }

    console.log("üìä –û–±—á–∏—Å–ª–µ–Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—è (%):", diffPercent);

    const response = await ZOHO.CRM.API.insertRecord({
      Entity: "Exchange_Rate_History",
      APIData: {
        Name: `–ö—É—Ä—Å –Ω–∞ ${new Date().toLocaleDateString("uk-UA")}`,
        Deal: dealId,
        Rate: rate,
        Date: now,
        Rate_Source: "–†—É—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è",
        Difference: parseFloat(diffPercent.toFixed(1))
      }
    });

    console.log("–Ü—Å—Ç–æ—Ä—ñ—é –∫—É—Ä—Å—É –∑–∞–ø–∏—Å–∞–Ω–æ:", response);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π –∫—É—Ä—Å
    if (response.data?.[0]?.details?.id) {
      const newId = response.data[0].details.id;
      const historyIds = JSON.parse(localStorage.getItem(`historyIds_${dealId}`)) || [];

      if (!historyIds.includes(newId)) {
        historyIds.push(newId);
        localStorage.setItem(`historyIds_${dealId}`, JSON.stringify(historyIds));
      }
      localStorage.setItem(`lastFieldRate_${dealId}`, rate.toString());
    }

    return true;
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:", error);
    return false;
  }
}